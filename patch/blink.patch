diff --git a/bindings/core/v8/script_streamer.cc b/bindings/core/v8/script_streamer.cc
index 486ef25..fd6e300 100644
--- a/bindings/core/v8/script_streamer.cc
+++ b/bindings/core/v8/script_streamer.cc
@@ -414,6 +414,9 @@ void ScriptStreamer::NotifyAppendData(ScriptResource* resource) {
       return;
     }
 
+    const char* script_source_str = this->ScriptURLString().Utf8().data();
+    script_streaming_task->set_script_url(std::string(script_source_str));
+
     if (RuntimeEnabledFeatures::ScheduledScriptStreamingEnabled()) {
       // Script streaming tasks are high priority, as they can block the parser,
       // and they can (and probably will) block during their own execution as
@@ -475,6 +478,9 @@ void ScriptStreamer::NotifyFinished() {
 
       // The task creation shouldn't fail, since it didn't fail before during
       // NotifyAppendData.
+      const char* script_source_str = this->ScriptURLString().Utf8().data();
+      script_streaming_task->set_script_url(std::string(script_source_str));
+
       CHECK(script_streaming_task);
       BackgroundScheduler::PostOnBackgroundThreadWithTraits(
           FROM_HERE, {base::TaskPriority::USER_BLOCKING},
diff --git a/core/BUILD.gn b/core/BUILD.gn
index 5111a0a..5ee4dd6 100644
--- a/core/BUILD.gn
+++ b/core/BUILD.gn
@@ -209,8 +209,8 @@ component("core") {
     "//third_party/blink/renderer/core/page",
     "//third_party/blink/renderer/core/paint",
     "//third_party/blink/renderer/core/probe",
-    "//third_party/blink/renderer/core/resize_observer",
-    "//third_party/blink/renderer/core/script",
+    "//third_party/blink/renderer/core/resize_observer", 
+    "//third_party/blink/renderer/core/script:script",
     "//third_party/blink/renderer/core/scroll",
     "//third_party/blink/renderer/core/streams",
     "//third_party/blink/renderer/core/style:rendering",
diff --git a/core/frame/BUILD.gn b/core/frame/BUILD.gn
index 3bd0476..5690436 100644
--- a/core/frame/BUILD.gn
+++ b/core/frame/BUILD.gn
@@ -72,6 +72,8 @@ blink_core_sources("frame") {
     "frame_view_auto_size_info.h",
     "fullscreen_controller.cc",
     "fullscreen_controller.h",
+    "global_ids.cc",
+    "global_ids.h",
     "history.cc",
     "history.h",
     "hosts_using_features.cc",
diff --git a/core/frame/dom_window.cc b/core/frame/dom_window.cc
index ef89938..0531869 100644
--- a/core/frame/dom_window.cc
+++ b/core/frame/dom_window.cc
@@ -37,7 +37,9 @@ namespace blink {
 DOMWindow::DOMWindow(Frame& frame)
     : frame_(frame),
       window_proxy_manager_(frame.GetWindowProxyManager()),
-      window_is_closing_(false) {}
+      window_is_closing_(false) {
+        asg_id_ = String::Number(0);
+      }
 
 DOMWindow::~DOMWindow() {
   // The frame must be disconnected before finalization.
diff --git a/core/frame/dom_window.h b/core/frame/dom_window.h
index 7583923..225e658 100644
--- a/core/frame/dom_window.h
+++ b/core/frame/dom_window.h
@@ -15,6 +15,10 @@
 #include "third_party/blink/renderer/platform/wtf/assertions.h"
 #include "third_party/blink/renderer/platform/wtf/forward.h"
 
+// JavaScript Conflict
+#include <map>
+#include <vector>
+
 namespace blink {
 
 class Document;
@@ -57,6 +61,7 @@ class CORE_EXPORT DOMWindow : public EventTargetWithInlineData,
   virtual bool IsLocalDOMWindow() const = 0;
   virtual bool IsRemoteDOMWindow() const = 0;
 
+  
   // ScriptWrappable overrides:
   v8::Local<v8::Object> Wrap(v8::Isolate*,
                              v8::Local<v8::Object> creation_context) final;
@@ -125,6 +130,12 @@ class CORE_EXPORT DOMWindow : public EventTargetWithInlineData,
                              LocalDOMWindow* source,
                              ExceptionState&);
 
+  String getAsgID() { return asg_id_; }
+  void incAsgID() {
+    int prev_id = asg_id_.ToInt(); 
+    asg_id_ = String::Number(prev_id+1); 
+  }
+
  protected:
   explicit DOMWindow(Frame&);
 
@@ -155,6 +166,9 @@ class CORE_EXPORT DOMWindow : public EventTargetWithInlineData,
   // operation has been performed, exposes (confusing)
   // implementation details to scripts.
   bool window_is_closing_;
+
+  // JavaScript Conflict
+  String asg_id_;
 };
 
 }  // namespace blink
diff --git a/core/frame/global_ids.cc b/core/frame/global_ids.cc
new file mode 100644
index 0000000..7c4f53a
--- /dev/null
+++ b/core/frame/global_ids.cc
@@ -0,0 +1,4 @@
+#include "third_party/blink/renderer/core/frame/global_ids.h"
+
+std::mutex window_mutex;
+int windowID = 0; 
diff --git a/core/frame/global_ids.h b/core/frame/global_ids.h
new file mode 100644
index 0000000..73c1484
--- /dev/null
+++ b/core/frame/global_ids.h
@@ -0,0 +1,3 @@
+#include <mutex>
+extern std::mutex window_mutex;
+extern int windowID;
diff --git a/core/frame/local_dom_window.cc b/core/frame/local_dom_window.cc
index b4b1e22..9b9a782 100644
--- a/core/frame/local_dom_window.cc
+++ b/core/frame/local_dom_window.cc
@@ -23,6 +23,8 @@
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
+#include <iostream>
+#include <fstream>
 
 #include "third_party/blink/renderer/core/frame/local_dom_window.h"
 
@@ -109,6 +111,9 @@
 #include "third_party/blink/renderer/platform/scroll/scroll_types.h"
 #include "third_party/blink/renderer/platform/weborigin/security_origin.h"
 
+#include "third_party/blink/renderer/core/frame/global_ids.h"
+
+
 namespace blink {
 
 // Timeout for link preloads to be used after window.onload
@@ -267,7 +272,12 @@ LocalDOMWindow::LocalDOMWindow(LocalFrame& frame)
       unused_preloads_timer_(frame.GetTaskRunner(TaskType::kInternalDefault),
                              this,
                              &LocalDOMWindow::WarnUnusedPreloads),
-      should_print_when_finished_loading_(false) {}
+      should_print_when_finished_loading_(false) {
+        window_mutex.lock(); 
+        windowID++; 
+        window_id_ = windowID; 
+        window_mutex.unlock();
+      }
 
 void LocalDOMWindow::ClearDocument() {
   if (!document_)
@@ -312,6 +322,22 @@ Document* LocalDOMWindow::CreateDocument(const String& mime_type,
   return document;
 }
 
+void LocalDOMWindow::appendAsgLogs(String ID, String log1, String log2, String log3, String log4, String log5, String log6) {
+  String log = ID + ",elem_js_conflict," + log1 + ",elem_js_conflict," + log2 +",elem_js_conflict," + log3 + ",elem_js_conflict," + log4 + ",elem_js_conflict," + log5 + ",elem_js_conflict," + log6;
+  pid_t pid = getpid();
+  char filename[128];
+  sprintf(filename, "%d.asg", pid);
+  std::ofstream f_out;
+  f_out.open(filename, std::ios::app);
+  if(!f_out)
+    std::cout << "Cannot Open File " << filename << std::endl;
+  else {
+    f_out << log << "\tscript_conflicts\n";
+    f_out.flush();
+    f_out.close();
+  }
+}
+
 LocalDOMWindow* LocalDOMWindow::From(const ScriptState* script_state) {
   v8::HandleScope scope(script_state->GetIsolate());
   return blink::ToLocalDOMWindow(script_state->GetContext());
diff --git a/core/frame/local_dom_window.h b/core/frame/local_dom_window.h
index aac28b0..19e9b73 100644
--- a/core/frame/local_dom_window.h
+++ b/core/frame/local_dom_window.h
@@ -325,6 +325,8 @@ class CORE_EXPORT LocalDOMWindow final : public DOMWindow,
 
   TrustedTypePolicyFactory* trustedTypes() const;
 
+  void appendAsgLogs(String ID, String log1, String log2, String log3, String log4, String log5, String log6);
+
  protected:
   // EventTarget overrides.
   void AddedEventListener(const AtomicString& event_type,
@@ -340,6 +342,9 @@ class CORE_EXPORT LocalDOMWindow final : public DOMWindow,
  private:
   // Intentionally private to prevent redundant checks when the type is
   // already LocalDOMWindow.
+  String asg_logs_;
+  int window_id_;
+
   bool IsLocalDOMWindow() const override { return true; }
   bool IsRemoteDOMWindow() const override { return false; }
   void WarnUnusedPreloads(TimerBase*);
diff --git a/core/frame/remote_dom_window.cc b/core/frame/remote_dom_window.cc
index 2b6edf3..491039e 100644
--- a/core/frame/remote_dom_window.cc
+++ b/core/frame/remote_dom_window.cc
@@ -1,6 +1,8 @@
 // Copyright 2014 The Chromium Authors. All rights reserved.
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
+#include <iostream>
+#include <fstream>
 
 #include "third_party/blink/renderer/core/frame/remote_dom_window.h"
 
@@ -11,6 +13,8 @@
 #include "third_party/blink/renderer/platform/weborigin/security_origin.h"
 #include "third_party/blink/renderer/platform/wtf/functional.h"
 
+#include "third_party/blink/renderer/core/frame/global_ids.h"
+
 namespace blink {
 
 ExecutionContext* RemoteDOMWindow::GetExecutionContext() const {
@@ -25,12 +29,35 @@ void RemoteDOMWindow::blur() {
   // FIXME: Implement.
 }
 
-RemoteDOMWindow::RemoteDOMWindow(RemoteFrame& frame) : DOMWindow(frame) {}
+RemoteDOMWindow::RemoteDOMWindow(RemoteFrame& frame) : DOMWindow(frame) {
+  window_mutex.lock(); 
+  windowID++; 
+  window_id_ = windowID; 
+  window_mutex.unlock();
+}
 
 void RemoteDOMWindow::FrameDetached() {
   DisconnectFromFrame();
 }
 
+
+void RemoteDOMWindow::appendAsgLogs(String ID, String log1, String log2, String log3, String log4, String log5, String log6) {
+  String log = ID + ",elem_js_conflict," + log1 + ",elem_js_conflict," + log2 + ",elem_js_conflict," + log3 + ",elem_js_conflict," + log4 + ",elem_js_conflict," + log5 + ",elem_js_conflict," + log6;
+  pid_t pid = getpid();
+  char filename[128];
+  sprintf(filename, "%d.asg", pid);
+  std::ofstream f_out;
+  f_out.open(filename, std::ios::app);
+  if(!f_out)
+    std::cout << "Cannot Open File " << filename << std::endl;
+  else {
+    f_out << log << "\tscript_conflicts\n";
+    f_out.flush();
+    f_out.close();
+  }
+}
+
+
 void RemoteDOMWindow::SchedulePostMessage(
     MessageEvent* event,
     scoped_refptr<const SecurityOrigin> target,
diff --git a/core/frame/remote_dom_window.h b/core/frame/remote_dom_window.h
index dd3ccb0..126541c 100644
--- a/core/frame/remote_dom_window.h
+++ b/core/frame/remote_dom_window.h
@@ -28,6 +28,8 @@ class RemoteDOMWindow final : public DOMWindow {
 
   void FrameDetached();
 
+  void appendAsgLogs(String ID, String log1, String log2, String log3, String log4, String log5, String log6);
+ 
  protected:
   // Protected DOMWindow overrides:
   void SchedulePostMessage(MessageEvent*,
@@ -35,6 +37,10 @@ class RemoteDOMWindow final : public DOMWindow {
                            Document* source) override;
 
  private:
+
+  String asg_logs_;
+  int window_id_;
+
   explicit RemoteDOMWindow(RemoteFrame&);
 
   // Intentionally private to prevent redundant checks when the type is
diff --git a/core/frame/window.idl b/core/frame/window.idl
index b142a29..d4ab4c2 100644
--- a/core/frame/window.idl
+++ b/core/frame/window.idl
@@ -223,6 +223,9 @@
 
     attribute DOMMatrixConstructor WebKitCSSMatrix;
 
+
+    void appendAsgLogs(DOMString ID, DOMString log1, DOMString log2, DOMString log3, DOMString log4, DOMString log5, DOMString log6);
+    
     //TrustedTypes API
     //http://github.com/wicg/trusted-types
     [RuntimeEnabled=TrustedDOMTypes] readonly attribute TrustedTypePolicyFactory TrustedTypes;
diff --git a/core/html/html_attribute_names.json5 b/core/html/html_attribute_names.json5
index 3490cba..5d4c024 100644
--- a/core/html/html_attribute_names.json5
+++ b/core/html/html_attribute_names.json5
@@ -21,6 +21,7 @@
     "alt",
     "archive",
     "as",
+    "asglogs",
     "async",
     "autocapitalize",
     "autocomplete",

